C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\obj\CMD.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Cmd\CMD.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User
                    -;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\
                    -System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Que
                    -ue) PRINT(.\obj\CMD.lst) OBJECT(.\obj\CMD.obj) 

stmt  level    source

    1          #include <stdlib.h>
    2          #include "CMD.h"
    3          #include "sensor.h"
    4          #include "mcp4725.h"
    5          #include "flash.h"
    6          #include "uart.h"
    7          #include "mwpro.h"
    8          #include "CalcCPS.h"
    9          #include "Mcp4725.h"
   10          #include "crc.h"
   11          
   12          #define FRAM_DELAY delay_ms(100)
   13          
   14          STU_CMD s_Head={0x68};
   15          uint8_t snedbuf[100];
   16          
   17          extern void DeviceGetBatAlarm(STU_BATTERY *bat);
   18          extern void DevSleep(void);
   19          
   20          
   21          //========================================================================
   22          // 函数名称: WORD WordToSmall(WORD dat)
   23          // 函数功能: 将WORD的数据转换为小端模式
   24          // 入口参数: @WORD dat：要转换的数据
   25          // 函数返回: 返回类型为WORD的小端模式数据
   26          // 当前版本: VER1.0
   27          // 修改日期: 2023.5.5
   28          // 当前作者:
   29          // 其他备注: 
   30          //========================================================================
   31          
   32          WORD WordToSmall(WORD dat)
   33          {
   34   1          BYTE buf[2];
   35   1          BYTE t;
   36   1          WORD ret;
   37   1          
   38   1          memcpy(buf, &dat, 2);
   39   1          t = buf[1];
   40   1          buf[1] = buf[0];
   41   1          buf[0] = t;
   42   1          
   43   1          memcpy(&ret, buf, 2);
   44   1          return ret;
   45   1      }
   46          
   47          float FloatToSmall(float dat)
   48          {
   49   1          BYTE buf[4];
   50   1          BYTE t;
   51   1          float ret;
   52   1          
   53   1          memcpy(buf, &dat, 4);
   54   1          t = buf[3];
   55   1          buf[3] = buf[0];
   56   1          buf[0] = t;
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 2   

   57   1          t = buf[2];
   58   1          buf[2] = buf[1];
   59   1          buf[1] = t;
   60   1      
   61   1          memcpy(&ret, buf, 4);
   62   1          return ret;
   63   1      }
   64          
   65          DWORD DwordToSmall(DWORD dat)
   66          {
   67   1          BYTE buf[4];
   68   1          BYTE t;
   69   1          DWORD ret;
   70   1          
   71   1          memcpy(buf, &dat, 4);
   72   1          t = buf[3];
   73   1          buf[3] = buf[0];
   74   1          buf[0] = t;
   75   1          t = buf[2];
   76   1          buf[2] = buf[1];
   77   1          buf[1] = t;
   78   1      
   79   1          memcpy(&ret, buf, 4);
   80   1          return ret;
   81   1      }
   82          
   83          
   84          //========================================================================
   85          // 函数名称: void GetPara(LP_PARAM *me)
   86          // 函数功能: 从FLASH中读取参数，包括"控制参数"和"报警参数"
   87          // 入口参数: @me：数据
   88          // 函数返回: 无
   89          // 当前版本: VER1.0
   90          // 修改日期: 2023.5.5
   91          // 当前作者:
   92          // 其他备注: 
   93          //========================================================================
   94          void GetPara(LP_PARAM *me)
   95          { 
   96   1            EEPROM_read(0,(u8 *)me,sizeof(LP_PARAM));
   97   1          if ( SysRunState.stParam.ParaCheckSum !=  CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2))
   98   1          {
   99   2                InitParam();
  100   2          }
  101   1          SysRunState.stParam.VerSion1 = VERSION1;
  102   1          SysRunState.stParam.VerSion2 = VERSION2;
  103   1          SysRunState.stParam.VerSion3 = VERSION3;
  104   1      }
  105          
  106          //========================================================================
  107          // 函数名称: void WritePara()
  108          // 函数功能: 写入数据到内存中
  109          // 入口参数: @无
  110          // 函数返回: 无
  111          // 当前版本: VER1.0
  112          // 修改日期: 2023.5.5
  113          // 当前作者:
  114          // 其他备注: 
  115          //========================================================================
  116          void WritePara()
  117          {
  118   1          EA = 0;
  119   1          EEPROM_SectorErase(0);
  120   1          EEPROM_SectorErase(512);
  121   1          SysRunState.stParam.ParaCheckSum = CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2);//add by
             - kevin at 20150417
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 3   

  122   1          if (!EEPROM_write(0, (u8 *)&SysRunState.stParam, sizeof(LP_PARAM)))
  123   1          {
  124   2              Error();
  125   2          }    
  126   1          EA = 1;
  127   1      }
  128          
  129          
  130          //向上位机发送命令
  131          void SendData(uint8_t cmd, uint8_t *cdata, uint16_t length)
  132          {
  133   1            uint16_t crc;
  134   1          //s_Head.head = 0x68;
  135   1          s_Head.cmd = cmd;
  136   1          s_Head.length = WordToSmall(length);
  137   1          memcpy(snedbuf,(uint8_t*)&s_Head,sizeof(STU_CMD));
  138   1          if(length>0)
  139   1          {
  140   2              memcpy(&snedbuf[sizeof(STU_CMD)],cdata,length);
  141   2          }
  142   1          crc = CRC16(snedbuf,length+sizeof(STU_CMD));
  143   1          crc = WordToSmall(crc);
  144   1          memcpy(&snedbuf[length+sizeof(STU_CMD)],(uint8_t*)&crc,2);
  145   1          snedbuf[length+sizeof(STU_CMD)+2] = 0x16;
  146   1          
  147   1          uartble_send(snedbuf,(u8)(length+7));
  148   1      }
  149          
  150          /*******************************************************************************
  151          功能：获取上位机指定的模式
  152          输入：无
  153          输出：工作模式
  154          *******************************************************************************/
  155          int GetWorkMode(void)
  156          {
  157   1        return 3;
  158   1      }
  159          
  160          void ReadFix()
  161          {
  162   1          SendData(CMD_READ_FIX,(uint8_t*)&SysRunState.stParam.Fix,sizeof(float)*FIX_COUNT);
  163   1      }
  164          
  165          void WriteFix(BYTE *dat)
  166          {
  167   1          memcpy((uint8_t*)&SysRunState.stParam.Fix,dat,sizeof(float)*FIX_COUNT);
  168   1          
  169   1          SendData(CMD_WRITE_FIX,NULL,0);
  170   1          SaveParam();
  171   1      }
  172          
  173          
  174          /*******************************************************************************
  175          功能：命令分析与执行
  176          输入：U32 id:指令ID号
  177                unsigned char dlc: 数据长度
  178                unsigned char *cdata:数据指针
  179          输出：无
  180          *******************************************************************************/
  181          STU_CMD gs_CMD={0};
  182          void DataPro(uint8_t *cdata, uint16_t length)
  183          {  
  184   1            uint16_t i;
  185   1          uint16_t crcRev;
  186   1          uint16_t crcOut;
  187   1          //STU_CMD *pCmd = NULL;
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 4   

  188   1          for(i=0;i<length; i++)
  189   1          {
  190   2                if(cdata[i] == 0x68)
  191   2              {
  192   3                    //pCmd = (STU_CMD *)&cdata[i];
  193   3                    memcpy(&gs_CMD,&cdata[i],sizeof(STU_CMD));
  194   3                  gs_CMD.length = WordToSmall(gs_CMD.length);
  195   3                  if((gs_CMD.length > length-7)||(cdata[i+6+gs_CMD.length] != 0x16))
  196   3                  {
  197   4                        continue;
  198   4                  }
  199   3                  crcRev = cdata[i+4+gs_CMD.length] + cdata[i+5+gs_CMD.length]*256;
  200   3                  crcOut = CRC16(&cdata[i],gs_CMD.length+4);
  201   3                  if(crcRev != crcOut)
  202   3                  {
  203   4                        continue;
  204   4                  }
  205   3                  SysRunState.NoUartTime = 0;
  206   3      
  207   3                  switch(gs_CMD.cmd)
  208   3                  {
  209   4                      case 'C'://联络命令
  210   4                      
  211   4                          ACK_CMD_C((uint8_t*)&SysRunState.stParam.SensorType);
  212   4      
  213   4                      break;
  214   4      
  215   4                      case 'V'://读计数
  216   4                          ACK_CMD_V();
  217   4                      break;
  218   4                      
  219   4                      case 'E'://读工作状态
  220   4                          ACK_CMD_E();
  221   4                      break;
  222   4      
  223   4                      case 'R'://读参数
  224   4                          ACK_CMD_R();
  225   4                      break;
  226   4      
  227   4                      case 'W'://写参数
  228   4                       if(length-i-5 > sizeof(SYS_PRAM))
  229   4                       {
  230   5                          ACK_CMD_W(&cdata[i+4]);
  231   5                       }
  232   4                      break;
  233   4      
  234   4                      case 'S'://存参数
  235   4                          ACK_CMD_S();
  236   4                      break;
  237   4      
  238   4                      case 1://清除累计剂量
  239   4                          ACK_CMD_ClearDoseSum();
  240   4                      break;
  241   4                      
  242   4                      case 2://清除最大剂量率
  243   4                          ACK_CMD_ClearMaxDoseRate();
  244   4                      break;
  245   4                      
  246   4                      case 3://探测器自检
  247   4                          ACK_CMD_SelfCheck();
  248   4                      break;
  249   4                      
  250   4                      case 4://开关探测器
  251   4                          ACK_CMD_SensorONOFF(cdata[i+4]);
  252   4                      break;
  253   4                      
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 5   

  254   4                      case 5://电池电量查询
  255   4                          ACK_CMD_Bat();
  256   4                      break;
  257   4      
  258   4                      case 6://报警确认
  259   4                          ACK_CMD_SureAlarm();
  260   4                      break;
  261   4      
  262   4                      case 7: // 量程切换
  263   4                          ACK_CMD_GmSw(cdata[i+4]);
  264   4                      break;
  265   4      
  266   4                      case 'B'://写报警参数
  267   4                          ACK_CMD_B(&cdata[i+4]);
  268   4                      break;
  269   4      
  270   4                      case 'F'://读报警参数
  271   4                          ACK_CMD_F();
  272   4                      break;
  273   4      
  274   4                      case CMD_READ_FIX:  ReadFix(); break;
  275   4                      case CMD_WRITE_FIX: WriteFix(&cdata[i+4]);  break;
  276   4                      
  277   4                      case 0x28://远程升级
  278   4                            //asm(" mov &0xFFBE, PC;"); //跳转到升级代码
  279   4                        break;
  280   4                  default:
  281   4                    break;
  282   4                  }
  283   3                  i += (gs_CMD.length+4);
  284   3              }
  285   2          }
  286   1      }
  287          
  288          /*******************************************************************************
  289          功能：联络命令响应
  290          输入：unsigned char SensorType:传感器类型
  291          输出：无
  292          *******************************************************************************/
  293          void ACK_CMD_C(u8 *SensorType)
  294          {
  295   1          SendData('C',SensorType,6);
  296   1      }
  297          
  298          
  299          
  300          /*******************************************************************************
  301          功能：读命令(R)响应
  302          输入：无
  303          输出：无
  304          *******************************************************************************/
  305          void ACK_CMD_R(void)
  306          {
  307   1          SYS_PRAM red;
  308   1          red.Hv = FloatToSmall(SysRunState.stParam.s_SysParam.Hv);
  309   1          red.Ct = FloatToSmall(SysRunState.stParam.s_SysParam.Ct);
  310   1          red.Hd = FloatToSmall(SysRunState.stParam.s_SysParam.Hd);
  311   1          red.Hn = SysRunState.stParam.s_SysParam.Hn; 
  312   1          
  313   1          red.Z1 = FloatToSmall(SysRunState.stParam.s_SysParam.Z1);
  314   1          red.Z2 = FloatToSmall(SysRunState.stParam.s_SysParam.Z2);
  315   1          
  316   1          red.DiYaCanshuA = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuA);
  317   1          red.DiYaCanshuB = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuB);
  318   1          red.DiYaCanshuC = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuC);
  319   1          
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 6   

  320   1          red.GaoYaCanshuA = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuA);
  321   1          red.GaoYaCanshuB = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuB);
  322   1          red.GaoYaCanshuC = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuC);
  323   1         
  324   1          SendData('R',(uint8_t*)&red,sizeof(SYS_PRAM));
  325   1      }
  326          
  327          
  328          /*******************************************************************************
  329          功能：写参数命令(W)响应
  330          输入：unsigned char *cdata:参数
  331          输出：无
  332          *******************************************************************************/
  333          void ACK_CMD_W(unsigned char *cdata)
  334          {
  335   1          SYS_PRAM wcm;
  336   1          memcpy((uint8_t*)&wcm,cdata,sizeof(SYS_PRAM));
  337   1          SysRunState.stParam.s_SysParam.Hv = FloatToSmall(wcm.Hv);
  338   1          SysRunState.stParam.s_SysParam.Ct = FloatToSmall(wcm.Ct);
  339   1          SysRunState.stParam.s_SysParam.Hd = FloatToSmall(wcm.Hd);
  340   1          SysRunState.stParam.s_SysParam.Hn = wcm.Hn;
  341   1          
  342   1          SysRunState.stParam.s_SysParam.Z1 = FloatToSmall(wcm.Z1);
  343   1          SysRunState.stParam.s_SysParam.Z2 = FloatToSmall(wcm.Z2);
  344   1      
  345   1          SysRunState.stParam.s_SysParam.DiYaCanshuA = FloatToSmall(wcm.DiYaCanshuA);
  346   1          SysRunState.stParam.s_SysParam.DiYaCanshuB = FloatToSmall(wcm.DiYaCanshuB);
  347   1          SysRunState.stParam.s_SysParam.DiYaCanshuC = FloatToSmall(wcm.DiYaCanshuC);
  348   1      
  349   1          SysRunState.stParam.s_SysParam.GaoYaCanshuA = FloatToSmall(wcm.GaoYaCanshuA);
  350   1          SysRunState.stParam.s_SysParam.GaoYaCanshuB = FloatToSmall(wcm.GaoYaCanshuB);
  351   1          SysRunState.stParam.s_SysParam.GaoYaCanshuC = FloatToSmall(wcm.GaoYaCanshuC);
  352   1      
  353   1          SendData('W',NULL,0);
  354   1          //SaveParam();
  355   1      
  356   1      }
  357          
  358          
  359          
  360          /*******************************************************************************
  361          功能：存参数命令(S)响应
  362          输入：unsigned char SensorType:传感器类型
  363          输出：无
  364          *******************************************************************************/
  365          void ACK_CMD_S(void)
  366          {
  367   1          SendData('S',NULL,0);
  368   1          SaveParam();
  369   1          MCP4725_OutVol(MCP4725_S1_ADDR,2500-(WORD)SysRunState.stParam.s_SysParam.Z1);//alphy 阈值
  370   1      }
  371          
  372          
  373          
  374          /*******************************************************************************
  375          功能：读计数命令(V)响应
  376          输入：unsigned char SensorType:传感器类型
  377          输出：无
  378          *******************************************************************************/
  379          
  380          void ACK_CMD_V(void)
  381          { 
  382   1          STU_DOSERATE gs_Dose;
  383   1          gs_Dose.C1 = FloatToSmall(SysRunState.s_DoseMSG.C1);
  384   1          gs_Dose.C2 = FloatToSmall(SysRunState.s_DoseMSG.C2);
  385   1          
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 7   

  386   1          gs_Dose.Dose = FloatToSmall(SysRunState.s_DoseMSG.Dose);
  387   1          gs_Dose.DoseRate = FloatToSmall(SysRunState.s_DoseMSG.DoseRate);
  388   1          gs_Dose.DRSt = SysRunState.s_DoseMSG.DRSt;
  389   1          gs_Dose.MaxDoseRate = FloatToSmall(SysRunState.s_DoseMSG.MaxDoseRate);
  390   1          
  391   1          gs_Dose.P1 = FloatToSmall(SysRunState.s_DoseMSG.P1);
  392   1          gs_Dose.P2 = FloatToSmall(SysRunState.s_DoseMSG.P2);
  393   1          
  394   1          SendData('V',(uint8_t*)&gs_Dose,sizeof(STU_DOSERATE));
  395   1      }
  396          
  397          
  398          /*******************************************************************************
  399          功能：写报警参数命令(WF)响应
  400          输入：unsigned char *cdata
  401          输出：无
  402          *******************************************************************************/
  403          void ACK_CMD_B(u8 *cdata)
  404          {
  405   1          SYS_ALARM wal;   
  406   1          memcpy((uint8_t*)&wal,cdata,sizeof(SYS_ALARM));
  407   1      
  408   1          SysRunState.stParam.s_Alarm.DoseAlarm = FloatToSmall(wal.DoseAlarm);
  409   1          SysRunState.stParam.s_Alarm.DosePreAlarm = FloatToSmall(wal.DosePreAlarm);
  410   1          SysRunState.stParam.s_Alarm.DoseRateAlarm = FloatToSmall(wal.DoseRateAlarm);
  411   1          SysRunState.stParam.s_Alarm.DoseRatePreAlarm = FloatToSmall(wal.DoseRatePreAlarm);
  412   1      
  413   1          SendData('B',NULL,0);
  414   1          
  415   1          //SaveParam();
  416   1      
  417   1      } 
  418          
  419          
  420          /*******************************************************************************
  421          功能：读报警参数命令(F)响应
  422          输入：无
  423          输出：无
  424          *******************************************************************************/
  425          void ACK_CMD_F(void)
  426          {
  427   1          SYS_ALARM ral;
  428   1          ral.DoseAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseAlarm);
  429   1          ral.DosePreAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DosePreAlarm);
  430   1          ral.DoseRateAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseRateAlarm);
  431   1          ral.DoseRatePreAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseRatePreAlarm);
  432   1      
  433   1          SendData('F',(uint8_t*)&ral,sizeof(SYS_ALARM));
  434   1      } 
  435          
  436          /*******************************************************************************
  437          功能：工作状态
  438          输入：
  439          输出：
  440          *******************************************************************************/
  441          void ACK_CMD_E(void)
  442          {
  443   1          uint16_t state = 3;
  444   1          uint16_t m_state = WordToSmall(state);
  445   1          SendData('E',(uint8_t*)&m_state,2);
  446   1      }
  447          
  448          /*******************************************************************************
  449          功能：清除累计剂量(1)响应
  450          输入：
  451          输出：
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 8   

  452          *******************************************************************************/
  453          void ACK_CMD_ClearDoseSum(void)
  454          {
  455   1          SysRunState.s_DoseMSG.Dose = 0;
  456   1          //SysRunState.s_DoseMSG.Dose_B = 0;
  457   1          SendData(1,NULL,0);
  458   1      }
  459          
  460          
  461          
  462          /*******************************************************************************
  463          功能：清除最大剂量率(2)响应
  464          输入：
  465          输出：
  466          *******************************************************************************/
  467          void ACK_CMD_ClearMaxDoseRate(void)
  468          {
  469   1          SysRunState.s_DoseMSG.MaxDoseRate = 0;
  470   1          //SysRunState.s_DoseMSG.MaxDoseRate_B = 0;
  471   1          SendData(2,NULL,0);
  472   1      }
  473          
  474          /*******************************************************************************
  475          功能：探测器自检(3)响应
  476          输入：
  477          输出：
  478          *******************************************************************************/
  479          void ACK_CMD_SelfCheck(void)
  480          {
  481   1          //自检
  482   1            uint16_t result=1;
  483   1          uint16_t m_result;
  484   1          if(/*(Get_Low_Counter() < LOW_DIBENDI)||*/(Get_Low_Counter() > LOW_GAOBENDI)
  485   1             /*||(Get_High_Counter() < HIGH_DIBENDI)*/||(Get_High_Counter() > HIGH_GAOBENDI))
  486   1          {
  487   2                result = 0;
  488   2          }
  489   1           m_result = WordToSmall(result); 
  490   1          SendData(3,(uint8_t*)&m_result,2);
  491   1      }
  492          
  493          /*******************************************************************************
  494          功能：开关探测器(4)响应
  495          输入：
  496          输出：
  497          *******************************************************************************/
  498          void ACK_CMD_SensorONOFF(uint16_t state)
  499          {
  500   1          SendData(4,NULL,0);
  501   1          //开关探测器
  502   1          if(state == 1)
  503   1          {
  504   2              SensorInit();
  505   2          }
  506   1          else
  507   1          {
  508   2                //DevSleep();
  509   2                SysRunState.NoUartTime = POWER_OFF_TIME+1;
  510   2          }
  511   1      }
  512          
  513          /*******************************************************************************
  514          功能：电池电量查询(5)响应
  515          输入：
  516          输出：
  517          *******************************************************************************/
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 9   

  518          STU_BATTERY s_Bat={0};
  519          void ACK_CMD_Bat(void)
  520          {
  521   1          STU_BATTERY bat;
  522   1          
  523   1          DeviceGetBatAlarm(&s_Bat);
  524   1          
  525   1          bat.Voltage = WordToSmall(s_Bat.Voltage);
  526   1          bat.Status = s_Bat.Status;
  527   1          bat.batPercent = s_Bat.batPercent; 
  528   1          
  529   1          SendData(5,(uint8_t*)&bat,sizeof(STU_BATTERY));
  530   1      }
  531          
  532          /*******************************************************************************
  533          功能：报警确认(6)响应
  534          输入：
  535          输出：
  536          *******************************************************************************/
  537          void ACK_CMD_SureAlarm(void)
  538          {
  539   1          //报警确认，关闭相应指示灯
  540   1          
  541   1          SendData(6,NULL,0);
  542   1      }
  543          
  544          
  545          /*******************************************************************************
  546          功能：切换高低量程
  547          输入：
  548          输出：
  549          *******************************************************************************/
  550          void ACK_CMD_GmSw(unsigned char Gm)
  551          {
  552   1          if (Gm == 1)
  553   1          {
  554   2              GDoseSeg = HIG_SEG;
  555   2          }
  556   1          else
  557   1          {
  558   2              GDoseSeg = LOW_SEG;
  559   2          }
  560   1          
  561   1          SendData(7,NULL,0);
  562   1      }
  563          
  564          //========================================================================
  565          // 函数名称: WORD CheckSum(BYTE *buf, WORD len)
  566          // 函数功能: 校验和函数
  567          // 入口参数: @*buf：数据；@len：长度
  568          // 函数返回: 校验结果
  569          // 当前版本: VER1.0
  570          // 修改日期: 2023.5.5
  571          // 当前作者:
  572          // 其他备注: 
  573          //========================================================================
  574          WORD CheckSum(BYTE *buf, WORD len)
  575          {
  576   1          WORD dwSum = 0;
  577   1          WORD i;
  578   1      
  579   1          for (i = 0; i < len; i++)
  580   1          {
  581   2              dwSum += buf[i];
  582   2          }
  583   1          return dwSum;
C251 COMPILER V5.60.0,  CMD                                                                28/03/24  10:48:58  PAGE 10  

  584   1      }
  585              
  586          void SaveParam()
  587          {
  588   1          EA = 0;//禁止中断
  589   1          WritePara();
  590   1          EA = 1;//允许中断
  591   1      }
  592          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2090     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       546     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
