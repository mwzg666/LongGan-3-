C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Sensor
OBJECT MODULE PLACED IN .\obj\Sensor.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Sensor\Sensor.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(
                    -.\User;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Har
                    -dware\System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardwa
                    -re\Queue) PRINT(.\obj\Sensor.lst) OBJECT(.\obj\Sensor.obj) 

stmt  level    source

    1          #include "Sensor.h"
    2          #include "CalcDoseRate.h"
    3          #include "CalcCPS.h"
    4          #include "DoseRate.h"
    5          #include "system.h"
    6          #include "CMD.h"
    7          
    8          u8 GDoseSeg = LOW_SEG;       //当前处在的段
    9          u8 Dose_switch = 0;    //低量程段0：测量值为γ，1：测量值为β
   10          u32 Low_CPS = 0;
   11          u32 High_CPS = 0;
   12          static float HightDoseRate;
   13          static float LowDoseRate;
   14          
   15          static float LowSmothCPS,HighSmothCPS;
   16          static float LowSmothCPS2,HighSmothCPS2;
   17          
   18          static float LowNOSmothCPS,HighNOSmothCPS;
   19          static float LowSumCPS,HighSumCPS;
   20          
   21          //β数据
   22          static float HSumCPS;
   23          
   24          static float SmothCPS_B;
   25          static float NOSmothCPS_B;
   26          static float SumCPS_B;
   27          
   28          u32 InSenserCnt = 0;
   29          float OldDr = 0.0;
   30          float NewDr;
   31          float RtCps,NewCps;
   32          float CanshuA,CanshuB,CanshuC,CanshuD;
   33          void SensorInit(void)
   34          {
   35   1          //CanshuA = SysRunState.stParam.s_SysParam.DiYaCanshuA;
   36   1          //CanshuB = SysRunState.stParam.s_SysParam.DiYaCanshuB;
   37   1          //CanshuC = SysRunState.stParam.s_SysParam.DiYaCanshuC; 
   38   1          //CanshuD = 0.0;
   39   1      
   40   1          UseSLParam(0);
   41   1          memset((void*)&SysRunState.s_DoseMSG,0,sizeof(STU_DOSERATE));
   42   1      }
   43          
   44          void SensorMeasureBegin(void)
   45          { 
   46   1          Low_CPS = 0;
   47   1          High_CPS = 0;
   48   1          //GetCounter();
   49   1          //GetBataCounter();
   50   1      }
   51          
   52          void UseSLParam(float dr)
   53          {
   54   1          if (dr < 8)
   55   1          {
   56   2              CanshuA = 1.06581410364015E-14; // SysRunState.stParam.s_SysParam.DiYaCanshuA;
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 2   

   57   2              CanshuB = 0.291478787484166;     // SysRunState.stParam.s_SysParam.DiYaCanshuB;
   58   2              CanshuC = 0.0108551044292504; //SysRunState.stParam.s_SysParam.DiYaCanshuC; 
   59   2              CanshuD = 0.0;
   60   2          }
   61   1          else if (dr < 500)
   62   1          {
   63   2              CanshuA = -0.358286803618626;
   64   2              CanshuB = 0.494100392430478;
   65   2              CanshuC = 9.76367631615528E-05;
   66   2              CanshuD = 0.0;
   67   2      
   68   2          }
   69   1          else  if (dr < 8000)
   70   1          {
   71   2              CanshuA = 125.037524058913;
   72   2              CanshuB = 0.305815634950024;
   73   2              CanshuC =  0.000147696929666487;
   74   2              CanshuD = 0.0;
   75   2          }
   76   1          else
   77   1          {
   78   2              CanshuA = -1129.62834067371;
   79   2              CanshuB = 1.44007488389396;
   80   2              CanshuC =  0.0;
   81   2              CanshuD = 0.0;
   82   2          }
   83   1          
   84   1          
   85   1      }
   86          
   87          
   88          void UseSHParam(float dr)
   89          {
   90   1          if (dr < 80000)
   91   1          {
   92   2              CanshuA = -56.4956084021251;
   93   2              CanshuB = 33.1391426920277;
   94   2              CanshuC =  -0.00121629383397334;
   95   2              CanshuD = 0.0;
   96   2          }
   97   1          else
   98   1          {
   99   2              CanshuA = -9890.61062326864;
  100   2              CanshuB = 32.8126304817507;
  101   2              CanshuC = 0.000275557442490988;
  102   2              CanshuD = 0.0;
  103   2          }
  104   1      }
  105          
  106          
  107          float DrFix(float dr)
  108          {
  109   1          float fix = 1.0;
  110   1          if (dr < 1.0)
  111   1          {
  112   2              fix = FloatToSmall(SysRunState.stParam.Fix[0]);
  113   2          }
  114   1          else if (dr < 10.0)
  115   1          {
  116   2              fix = FloatToSmall(SysRunState.stParam.Fix[1]);
  117   2          }
  118   1          else if (dr < 100.0)
  119   1          {
  120   2              fix = FloatToSmall(SysRunState.stParam.Fix[2]);
  121   2          }
  122   1          else if (dr < 1000.0)
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 3   

  123   1          {
  124   2              fix = FloatToSmall(SysRunState.stParam.Fix[3]);
  125   2          }
  126   1          else if (dr < 10000.0)
  127   1          {
  128   2              fix = FloatToSmall(SysRunState.stParam.Fix[4]);
  129   2          }
  130   1          else if (dr < 100000.0)
  131   1          {
  132   2              fix = FloatToSmall(SysRunState.stParam.Fix[5]);
  133   2          }
  134   1          else if (dr < 1000000.0)
  135   1          {
  136   2              fix = FloatToSmall(SysRunState.stParam.Fix[6]);
  137   2          }
  138   1          else if (dr < 10000000.0)
  139   1          {
  140   2              fix = FloatToSmall(SysRunState.stParam.Fix[7]);
  141   2          }
  142   1          else if (dr < 100000000.0)
  143   1          {
  144   2              fix = FloatToSmall(SysRunState.stParam.Fix[8]);
  145   2          }
  146   1          else if (dr < 1.0E+9) //1000000000.0)
  147   1          {
  148   2              fix = FloatToSmall(SysRunState.stParam.Fix[9]);
  149   2          }
  150   1          else if (dr < 1.0E+10) // 10000000000.0)
  151   1          {
  152   2              fix = FloatToSmall(SysRunState.stParam.Fix[10]);
  153   2          }
  154   1      
  155   1          return (dr*fix);
  156   1      }
  157          
  158          
  159          
  160          void CaptureSensorPluseCounter(void)
  161          {
  162   1          /**************测试用的****************************************/
  163   1          //Low_CPS = 10;
  164   1          //High_CPS = 10;
  165   1          /*****************************************************/
  166   1          
  167   1          //FilterLow(Low_CPS);
  168   1          //FilterHigh(High_CPS);
  169   1          //LowSumCPS += Low_CPS;
  170   1      
  171   1          LowSumCPS = GetCounter();
  172   1          //HighSumCPS += High_CPS;
  173   1          HighSumCPS = GetHightCounter();
  174   1      
  175   1          if((LowSumCPS == 0)&&(SysRunState.LowChanneloff == 0))
  176   1          {
  177   2                SysRunState.LChannelNoCountTime++;
  178   2          }
  179   1          else
  180   1          {
  181   2                SysRunState.LChannelNoCountTime = 0;
  182   2          }
  183   1          if(HighSumCPS == 0)
  184   1          {
  185   2                SysRunState.HChannelNoCountTime++;
  186   2          }
  187   1          else
  188   1          {
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 4   

  189   2                SysRunState.HChannelNoCountTime = 0;
  190   2          }
  191   1          switch(GDoseSeg)
  192   1          {
  193   2              case LOW_SEG:
  194   2              {
  195   3                  SysRunState.LowChanneloff = 0;
  196   3                  LowSmothCPS = CalcLow(
  197   3                              CanshuA, 
  198   3                              CanshuB, 
  199   3                              CanshuC,
  200   3                              LowSumCPS, 
  201   3                              LowDoseRate,
  202   3                              &SysRunState.s_DoseMSG.C1);
  203   3                  if (LowSmothCPS != -1)
  204   3                  {
  205   4                      SysRunState.s_DoseMSG.C1 *= SysRunState.stParam.s_SysParam.DiYaCanshuC;
  206   4                      LowDoseRate = SysRunState.s_DoseMSG.C1;
  207   4                  }
  208   3                  UseSLParam(SysRunState.s_DoseMSG.C1);
  209   3                  SysRunState.s_DoseMSG.DoseRate = LowDoseRate;
  210   3      
  211   3                  if (SysRunState.s_DoseMSG.DoseRate >= USE_LOW_USV)// &&
  212   3                        //(SysRunState.s_DoseMSG.C2 >= 30)  ) // 确保是伽马才切换
  213   3                  {
  214   4                      GDoseSeg = HIG_SEG;
  215   4                      ClearCounter();
  216   4                  }
  217   3                  break;
  218   3              }
  219   2      
  220   2              case HIG_SEG:
  221   2              {
  222   3                  SysRunState.LowChanneloff = 1;
  223   3                  HighSmothCPS = CalcHigh(
  224   3                            CanshuA, 
  225   3                            CanshuB, 
  226   3                            CanshuC,
  227   3                            HighSumCPS, 
  228   3                            HightDoseRate,
  229   3                            &SysRunState.s_DoseMSG.C2);
  230   3                  if (HighSmothCPS != -1)
  231   3                  {
  232   4                      SysRunState.s_DoseMSG.C2 *= SysRunState.stParam.s_SysParam.GaoYaCanshuC;
  233   4                      HightDoseRate = SysRunState.s_DoseMSG.C2;
  234   4                  }
  235   3                  UseSHParam(HightDoseRate);
  236   3                  SysRunState.s_DoseMSG.DoseRate = HightDoseRate;
  237   3      
  238   3                  if(SysRunState.s_DoseMSG.DoseRate < USE_HIGH_USV)
  239   3                  {
  240   4                      GDoseSeg = LOW_SEG;
  241   4                      ClearCounter();
  242   4                  }
  243   3                  break;
  244   3              }
  245   2              default: GDoseSeg = LOW_SEG;break;
  246   2              
  247   2          }
  248   1                       
  249   1          LowNOSmothCPS = LowSumCPS;
  250   1          HighNOSmothCPS = HighSumCPS;    
  251   1              
  252   1          HighSumCPS = 0;
  253   1          LowSumCPS = 0;
  254   1          
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 5   

  255   1          /*if(SysRunState.s_DoseMSG.C1 > 1)
  256   1          {
  257   1              //剂量率大于1，停止
  258   1              LowSumCPS = 0;
  259   1          }*/
  260   1          
  261   1          SysRunState.s_DoseMSG.P1 = LowNOSmothCPS;
  262   1          SysRunState.s_DoseMSG.P2 = HighNOSmothCPS;
  263   1      
  264   1          /*if(SysRunState.testtime>0)
  265   1          {
  266   1                SysRunState.s_DoseMSG.DoseRate = 999.9;
  267   1          }*/
  268   1      
  269   1          SysRunState.s_DoseMSG.DoseRate = DrFix(SysRunState.s_DoseMSG.DoseRate);
  270   1          SysRunState.s_DoseMSG.Dose += SysRunState.s_DoseMSG.DoseRate/3600.0f;
  271   1          
  272   1          if(SysRunState.s_DoseMSG.DoseRate>SysRunState.s_DoseMSG.MaxDoseRate)
  273   1          {
  274   2              SysRunState.s_DoseMSG.MaxDoseRate = SysRunState.s_DoseMSG.DoseRate;
  275   2          }
  276   1          
  277   1          CalcAlarmState(&SysRunState);           
  278   1      
  279   1      }
  280          
  281          float Get_Low_Counter(void)
  282          {
  283   1          return LowNOSmothCPS;
  284   1      }
  285          
  286          float Get_High_Counter(void)
  287          {
  288   1          return HighNOSmothCPS;
  289   1      }
  290          
  291          float Get_Low_Smooth_Counter(void)
  292          {
  293   1          return LowSmothCPS;
  294   1      }
  295          
  296          float Get_High_Smooth_Counter(void)
  297          {
  298   1          return HighSmothCPS;
  299   1      }
  300          
  301          u16 CalcAlarmState(LP_SYSTEM_STTAE *me)
  302          {
  303   1      #if 0
                     /* 剂量当量报警检查 */    
                   if ((me->s_DoseMSG.Dose >= me->stParam.s_Alarm.DoseAlarm)&&(me->stParam.s_Alarm.DoseAlarm > 0)) 
                   { 
                       me->s_DoseMSG.DoSt = 2;
                   } 
                   /* 剂量当量预警检查 */    
                   else if((me->s_DoseMSG.Dose >= me->stParam.s_Alarm.DosePreAlarm)&&(me->stParam.s_Alarm.DosePreAlarm >
             - 0)) 
                   { 
                       me->s_DoseMSG.DoSt = 1;
                   } 
               #endif
  315   1          
  316   1          //U16 alarmState = me->Alarmstate&BATTARY_LOW_BIT;
  317   1            if(me->s_DoseMSG.DoseRate >= 9999999)//10Sv以上则是过载报警
  318   1          {
  319   2                me->s_DoseMSG.DoseRate = 9999999;
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 6   

  320   2              me->s_DoseMSG.DRSt = 5;
  321   2              return true;
  322   2          }
  323   1          
  324   1          /* 剂量当量率报警检查 */    
  325   1          if ((me->s_DoseMSG.DoseRate >= me->stParam.s_Alarm.DoseRateAlarm)&&(me->stParam.s_Alarm.DoseRateAlarm
             - > 0)) 
  326   1          { 
  327   2              if((++me->DoseRateAlarmCnt) >= MIB_CST_DOSERATE_THRESHOLD_ALARM) {//连续两次报警则认为报警
  328   3                  me->s_DoseMSG.DRSt = 2;
  329   3                  return true;
  330   3              }
  331   2          } else {
  332   2              me->DoseRateAlarmCnt= 0x0;
  333   2              me->s_DoseMSG.DRSt = 0;
  334   2          }
  335   1          
  336   1          /* 剂量当量率预警检查 */    
  337   1          if ((me->s_DoseMSG.DoseRate >= me->stParam.s_Alarm.DoseRatePreAlarm)&&(me->s_DoseMSG.DoseRate < me->s
             -tParam.s_Alarm.DoseRateAlarm))
  338   1          { 
  339   2              if((++me->DoseRatePreAlarmCnt) >= MIB_CST_DOSERATE_THRESHOLD_WARNING) {//连续两次报警则认为报警
  340   3                  me->s_DoseMSG.DRSt = 1;
  341   3                  return true;
  342   3              }
  343   2          } else {
  344   2              me->DoseRatePreAlarmCnt= 0x0;
  345   2              me->s_DoseMSG.DRSt = 0;
  346   2          }
  347   1          
  348   1          //if((SysRunState.LChannelNoCountTime>60)&&(SysRunState.HChannelNoCountTime>1200))//低通道1分钟无数据
             -，高通道10分钟无数据则报双探测器异常
  349   1          //{
  350   1          //      me->s_DoseMSG.DRSt = 8;
  351   1          //}
  352   1          //else 
  353   1          if(SysRunState.LChannelNoCountTime>60)//低通道1分钟无数据,探测器异常
  354   1          {
  355   2                me->s_DoseMSG.DRSt = 6;
  356   2          }
  357   1          //else if(SysRunState.HChannelNoCountTime>1200)//高通道20分钟无数据,探测器异常
  358   1          //{
  359   1                //me->s_DoseMSG.DRSt = 7;
  360   1          //}
  361   1          else
  362   1          {
  363   2                me->s_DoseMSG.DRSt = 0;
  364   2          }
  365   1          return true;
  366   1      }
  367          
  368          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1593     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       122     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V5.60.0,  Sensor                                                             28/03/24  10:48:58  PAGE 7   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        42     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
